// <auto-generated />
using System;
using AccountBox.Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccountBox.Data.Migrations.PostgreSQL
{
    [DbContext(typeof(AccountBoxDbContext))]
    partial class AccountBoxDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountBox.Data.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExtendedData")
                        .IsRequired()
                        .HasMaxLength(10240)
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("WebsiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Username")
                        .HasDatabaseName("IX_Accounts_Username");

                    b.HasIndex("WebsiteId");

                    b.HasIndex("IsDeleted", "DeletedAt")
                        .HasDatabaseName("IX_Accounts_IsDeleted_DeletedAt");

                    b.HasIndex("WebsiteId", "IsDeleted");

                    b.HasIndex("WebsiteId", "Username")
                        .HasDatabaseName("IX_Accounts_WebsiteId_Username");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("AccountBox.Data.Entities.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("KeyPlaintext")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ScopeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("KeyPlaintext")
                        .IsUnique();

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("AccountBox.Data.Entities.ApiKeyWebsiteScope", b =>
                {
                    b.Property<int>("ApiKeyId")
                        .HasColumnType("integer");

                    b.Property<int>("WebsiteId")
                        .HasColumnType("integer");

                    b.HasKey("ApiKeyId", "WebsiteId");

                    b.HasIndex("WebsiteId");

                    b.ToTable("ApiKeyWebsiteScopes");
                });

            modelBuilder.Entity("AccountBox.Data.Entities.LoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AttemptTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("AttemptTime")
                        .HasDatabaseName("IX_LoginAttempts_AttemptTime");

                    b.HasIndex("IPAddress", "AttemptTime")
                        .HasDatabaseName("IX_LoginAttempts_IPAddress_AttemptTime");

                    b.ToTable("LoginAttempts");
                });

            modelBuilder.Entity("AccountBox.Data.Entities.Website", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DisplayName");

                    b.HasIndex("Domain")
                        .IsUnique()
                        .HasDatabaseName("IX_Websites_Domain");

                    b.ToTable("Websites", (string)null);
                });

            modelBuilder.Entity("AccountBox.Data.Entities.Account", b =>
                {
                    b.HasOne("AccountBox.Data.Entities.Website", "Website")
                        .WithMany("Accounts")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("AccountBox.Data.Entities.ApiKeyWebsiteScope", b =>
                {
                    b.HasOne("AccountBox.Data.Entities.ApiKey", "ApiKey")
                        .WithMany("ApiKeyWebsiteScopes")
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountBox.Data.Entities.Website", "Website")
                        .WithMany()
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApiKey");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("AccountBox.Data.Entities.ApiKey", b =>
                {
                    b.Navigation("ApiKeyWebsiteScopes");
                });

            modelBuilder.Entity("AccountBox.Data.Entities.Website", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
