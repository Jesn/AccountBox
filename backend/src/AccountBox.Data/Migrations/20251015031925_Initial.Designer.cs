// <auto-generated />
using System;
using AccountBox.Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountBox.Data.Migrations
{
    [DbContext(typeof(AccountBoxDbContext))]
    [Migration("20251015031925_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("AccountBox.Data.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("NotesEncrypted")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("NotesIV")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("NotesTag")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordEncrypted")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordIV")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordTag")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("WebsiteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Username");

                    b.HasIndex("WebsiteId");

                    b.HasIndex("WebsiteId", "IsDeleted");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("AccountBox.Data.Entities.KeySlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Argon2Iterations")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Argon2MemorySize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Argon2Parallelism")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Argon2Salt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("EncryptedVaultKey")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("VaultKeyIV")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("VaultKeyTag")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.ToTable("KeySlots", null, t =>
                        {
                            t.HasCheckConstraint("CK_KeySlot_Singleton", "[Id] = 1");
                        });
                });

            modelBuilder.Entity("AccountBox.Data.Entities.Website", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DisplayName");

                    b.HasIndex("Domain")
                        .IsUnique();

                    b.ToTable("Websites", (string)null);
                });

            modelBuilder.Entity("AccountBox.Data.Entities.Account", b =>
                {
                    b.HasOne("AccountBox.Data.Entities.Website", "Website")
                        .WithMany("Accounts")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("AccountBox.Data.Entities.Website", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
